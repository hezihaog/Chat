package com.zh.android.chat.service.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zh.android.chat.service.db.greendao.qr.entity.QrCodeScanHistoryEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_qr_code_history".
*/
public class QrCodeScanHistoryEntityDao extends AbstractDao<QrCodeScanHistoryEntity, Long> {

    public static final String TABLENAME = "tb_qr_code_history";

    /**
     * Properties of entity QrCodeScanHistoryEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property CreateTime = new Property(1, java.util.Date.class, "createTime", false, "create_time");
        public final static Property UserId = new Property(2, String.class, "userId", false, "user_id");
        public final static Property QrCodeContent = new Property(3, String.class, "qrCodeContent", false, "qr_code_content");
    }


    public QrCodeScanHistoryEntityDao(DaoConfig config) {
        super(config);
    }
    
    public QrCodeScanHistoryEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tb_qr_code_history\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"create_time\" INTEGER NOT NULL ," + // 1: createTime
                "\"user_id\" TEXT NOT NULL ," + // 2: userId
                "\"qr_code_content\" TEXT NOT NULL );"); // 3: qrCodeContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tb_qr_code_history\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QrCodeScanHistoryEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCreateTime().getTime());
        stmt.bindString(3, entity.getUserId());
        stmt.bindString(4, entity.getQrCodeContent());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QrCodeScanHistoryEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCreateTime().getTime());
        stmt.bindString(3, entity.getUserId());
        stmt.bindString(4, entity.getQrCodeContent());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QrCodeScanHistoryEntity readEntity(Cursor cursor, int offset) {
        QrCodeScanHistoryEntity entity = new QrCodeScanHistoryEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // createTime
            cursor.getString(offset + 2), // userId
            cursor.getString(offset + 3) // qrCodeContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QrCodeScanHistoryEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreateTime(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setUserId(cursor.getString(offset + 2));
        entity.setQrCodeContent(cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QrCodeScanHistoryEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QrCodeScanHistoryEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QrCodeScanHistoryEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
